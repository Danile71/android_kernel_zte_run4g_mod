////////////////////////////////////////////////////////////////////////
//
// MPDSchema.cpp
//
// This file was generated by XMLSpy 2012r2sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#include "mpdschema_prefix.h"
#include <string.h>
#include "MPDSchema.h"
#include <algorithm>
#include <ctype.h>


#include "XercesString.h"
#include "dash_static.h"




// turn off warning: "this" used in base initializer list


namespace MPDSchema
{


xercesc::DOMNode* TypeBase::GetElementNth(const altova::MemberInfo* member, unsigned index)
{
    for (XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
    {
        if (index-- == 0)
            return *it;
    }
    return 0;
}

xercesc::DOMNode* TypeBase::GetElementLast(const altova::MemberInfo* member)
{
    xercesc::DOMNode* p;
    for (XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
    {
        p = *it;
    }
    return p;
}

unsigned TypeBase::CountElement(const altova::MemberInfo* member)
{
    unsigned count = 0;
    for (XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
    {
        ++count;
    }
    return count;
}

void TypeBase::RemoveElement(const altova::MemberInfo* member)
{
    XercesTreeOperations::RemoveElements(m_node, member);
}

int TypeBase::GetEnumerationIndex( const string_type sValue, const unsigned enumOffset, const unsigned enumCount)
{
    unsigned enumIndex = enumOffset;

    while( enumIndex < (enumOffset + enumCount) )
    {
        const FacetInfo* facet = GetTableEntry(facets, enumIndex);

        if( facet->StringValue == sValue)
            return enumIndex - enumOffset;
        enumIndex++;
    }
    return -1; //Invalid
}

string_type TypeBase::GetEnumerationValue( const int index, const unsigned enumOffset, const unsigned enumCount)
{
    unsigned enumIndex = enumOffset + index;

    if( enumIndex >= enumOffset && enumIndex < (enumOffset + enumCount) )
    {
        const FacetInfo* facet = GetTableEntry(facets, enumIndex);
        return facet->StringValue;
    }
    else
        throw altova::ConversionException( _T("Enumeration index out of range.") );
}


namespace xs
{   

CENTITIES::CENTITIES(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CENTITIES::CENTITIES(CENTITIES const& other)
: TypeBase(other.GetNode())
{
}


CENTITY::CENTITY(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CENTITY::CENTITY(CENTITY const& other)
: TypeBase(other.GetNode())
{
}


CID::CID(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CID::CID(CID const& other)
: TypeBase(other.GetNode())
{
}


CIDREF::CIDREF(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CIDREF::CIDREF(CIDREF const& other)
: TypeBase(other.GetNode())
{
}


CIDREFS::CIDREFS(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CIDREFS::CIDREFS(CIDREFS const& other)
: TypeBase(other.GetNode())
{
}


CNCName::CNCName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNCName::CNCName(CNCName const& other)
: TypeBase(other.GetNode())
{
}


CNMTOKEN::CNMTOKEN(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNMTOKEN::CNMTOKEN(CNMTOKEN const& other)
: TypeBase(other.GetNode())
{
}


CNMTOKENS::CNMTOKENS(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNMTOKENS::CNMTOKENS(CNMTOKENS const& other)
: TypeBase(other.GetNode())
{
}


CNOTATION::CNOTATION(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNOTATION::CNOTATION(CNOTATION const& other)
: TypeBase(other.GetNode())
{
}


CName::CName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CName::CName(CName const& other)
: TypeBase(other.GetNode())
{
}


CQName::CQName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CQName::CQName(CQName const& other)
: TypeBase(other.GetNode())
{
}


CanySimpleType::CanySimpleType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanySimpleType::CanySimpleType(CanySimpleType const& other)
: TypeBase(other.GetNode())
{
}


CanyType::CanyType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanyType::CanyType(CanyType const& other)
: TypeBase(other.GetNode())
{
}

void CanyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("anyType"), _T("http://www.w3.org/2001/XMLSchema"));
}

CanyURI::CanyURI(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanyURI::CanyURI(CanyURI const& other)
: TypeBase(other.GetNode())
{
}


Cbase64Binary::Cbase64Binary(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cbase64Binary::Cbase64Binary(Cbase64Binary const& other)
: TypeBase(other.GetNode())
{
}


Cboolean::Cboolean(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cboolean::Cboolean(Cboolean const& other)
: TypeBase(other.GetNode())
{
}


Cbyte::Cbyte(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cbyte::Cbyte(Cbyte const& other)
: TypeBase(other.GetNode())
{
}


Cdate::Cdate(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdate::Cdate(Cdate const& other)
: TypeBase(other.GetNode())
{
}


CdateTime::CdateTime(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CdateTime::CdateTime(CdateTime const& other)
: TypeBase(other.GetNode())
{
}


Cdecimal::Cdecimal(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdecimal::Cdecimal(Cdecimal const& other)
: TypeBase(other.GetNode())
{
}


Cdouble::Cdouble(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdouble::Cdouble(Cdouble const& other)
: TypeBase(other.GetNode())
{
}


Cduration::Cduration(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cduration::Cduration(Cduration const& other)
: TypeBase(other.GetNode())
{
}


Cfloat::Cfloat(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cfloat::Cfloat(Cfloat const& other)
: TypeBase(other.GetNode())
{
}


CgDay::CgDay(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgDay::CgDay(CgDay const& other)
: TypeBase(other.GetNode())
{
}


CgMonth::CgMonth(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgMonth::CgMonth(CgMonth const& other)
: TypeBase(other.GetNode())
{
}


CgMonthDay::CgMonthDay(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgMonthDay::CgMonthDay(CgMonthDay const& other)
: TypeBase(other.GetNode())
{
}


CgYear::CgYear(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgYear::CgYear(CgYear const& other)
: TypeBase(other.GetNode())
{
}


CgYearMonth::CgYearMonth(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgYearMonth::CgYearMonth(CgYearMonth const& other)
: TypeBase(other.GetNode())
{
}


ChexBinary::ChexBinary(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

ChexBinary::ChexBinary(ChexBinary const& other)
: TypeBase(other.GetNode())
{
}


Cint::Cint(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cint::Cint(Cint const& other)
: TypeBase(other.GetNode())
{
}


Cinteger::Cinteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cinteger::Cinteger(Cinteger const& other)
: TypeBase(other.GetNode())
{
}


Clanguage::Clanguage(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Clanguage::Clanguage(Clanguage const& other)
: TypeBase(other.GetNode())
{
}


Clong::Clong(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Clong::Clong(Clong const& other)
: TypeBase(other.GetNode())
{
}


CnegativeInteger::CnegativeInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnegativeInteger::CnegativeInteger(CnegativeInteger const& other)
: TypeBase(other.GetNode())
{
}


CnonNegativeInteger::CnonNegativeInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnonNegativeInteger::CnonNegativeInteger(CnonNegativeInteger const& other)
: TypeBase(other.GetNode())
{
}


CnonPositiveInteger::CnonPositiveInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnonPositiveInteger::CnonPositiveInteger(CnonPositiveInteger const& other)
: TypeBase(other.GetNode())
{
}


CnormalizedString::CnormalizedString(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnormalizedString::CnormalizedString(CnormalizedString const& other)
: TypeBase(other.GetNode())
{
}


CpositiveInteger::CpositiveInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CpositiveInteger::CpositiveInteger(CpositiveInteger const& other)
: TypeBase(other.GetNode())
{
}


Cshort::Cshort(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cshort::Cshort(Cshort const& other)
: TypeBase(other.GetNode())
{
}


Cstring::Cstring(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cstring::Cstring(Cstring const& other)
: TypeBase(other.GetNode())
{
}


Ctime::Ctime(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Ctime::Ctime(Ctime const& other)
: TypeBase(other.GetNode())
{
}


Ctoken::Ctoken(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Ctoken::Ctoken(Ctoken const& other)
: TypeBase(other.GetNode())
{
}


CunsignedByte::CunsignedByte(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedByte::CunsignedByte(CunsignedByte const& other)
: TypeBase(other.GetNode())
{
}


CunsignedInt::CunsignedInt(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedInt::CunsignedInt(CunsignedInt const& other)
: TypeBase(other.GetNode())
{
}


CunsignedLong::CunsignedLong(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedLong::CunsignedLong(CunsignedLong const& other)
: TypeBase(other.GetNode())
{
}


CunsignedShort::CunsignedShort(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedShort::CunsignedShort(CunsignedShort const& other)
: TypeBase(other.GetNode())
{
}


CanyURIType::CanyURIType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanyURIType::CanyURIType(CanyURIType const& other)
: TypeBase(other.GetNode())
{
}

void CanyURIType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("anyURI"), _T("http://www.w3.org/2001/XMLSchema"));
}

CstringType::CstringType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CstringType::CstringType(CstringType const& other)
: TypeBase(other.GetNode())
{
}

void CstringType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("string"), _T("http://www.w3.org/2001/XMLSchema"));
}

} // namespace xs


CAdaptationSetType::CAdaptationSetType(xercesc::DOMNode* const& node)
: ::MPDSchema::CRepresentationBaseType(node)
, id(*this) // "@id"
, group(*this)  // "@group"
, lang(*this)   // "@lang"
, contentType(*this)    // "@contentType"
, par(*this)    // "@par"
, minBandwidth(*this)   // "@minBandwidth"
, maxBandwidth(*this)   // "@maxBandwidth"
, minWidth(*this)   // "@minWidth"
, maxWidth(*this)   // "@maxWidth"
, minHeight(*this)  // "@minHeight"
, maxHeight(*this)  // "@maxHeight"
, minFrameRate(*this)   // "@minFrameRate"
, maxFrameRate(*this)   // "@maxFrameRate"
, segmentAlignment(*this)   // "@segmentAlignment"
, subsegmentAlignment(*this)    // "@subsegmentAlignment"
, subsegmentStartsWithSAP(*this)    // "@subsegmentStartsWithSAP"
, bitstreamSwitching(*this) // "@bitstreamSwitching"
, Accessibility(*this)  // "Accessibility"
, Role(*this)   // "Role"
, Rating(*this) // "Rating"
, Viewpoint(*this)  // "Viewpoint"
, ContentComponent(*this)   // "ContentComponent"
, BaseURL(*this)    // "BaseURL"
, SegmentBase(*this)    // "SegmentBase"
, SegmentList(*this)    // "SegmentList"
, SegmentTemplate(*this)    // "SegmentTemplate"
, Representation(*this) // "Representation"
{
}

CAdaptationSetType::CAdaptationSetType(CAdaptationSetType const& other)
: ::MPDSchema::CRepresentationBaseType(other.GetNode())
, id(*this) // "@id"
, group(*this)  // "@group"
, lang(*this)   // "@lang"
, contentType(*this)    // "@contentType"
, par(*this)    // "@par"
, minBandwidth(*this)   // "@minBandwidth"
, maxBandwidth(*this)   // "@maxBandwidth"
, minWidth(*this)   // "@minWidth"
, maxWidth(*this)   // "@maxWidth"
, minHeight(*this)  // "@minHeight"
, maxHeight(*this)  // "@maxHeight"
, minFrameRate(*this)   // "@minFrameRate"
, maxFrameRate(*this)   // "@maxFrameRate"
, segmentAlignment(*this)   // "@segmentAlignment"
, subsegmentAlignment(*this)    // "@subsegmentAlignment"
, subsegmentStartsWithSAP(*this)    // "@subsegmentStartsWithSAP"
, bitstreamSwitching(*this) // "@bitstreamSwitching"
, Accessibility(*this)  // "Accessibility"
, Role(*this)   // "Role"
, Rating(*this) // "Rating"
, Viewpoint(*this)  // "Viewpoint"
, ContentComponent(*this)   // "ContentComponent"
, BaseURL(*this)    // "BaseURL"
, SegmentBase(*this)    // "SegmentBase"
, SegmentList(*this)    // "SegmentList"
, SegmentTemplate(*this)    // "SegmentTemplate"
, Representation(*this) // "Representation"
{
}

void CAdaptationSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("AdaptationSetType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}



CBaseURLType::CBaseURLType(xercesc::DOMNode* const& node)
: ::MPDSchema::xs::CanyURIType(node)
, serviceLocation(*this)    // "@serviceLocation"
, byteRange(*this)  // "@byteRange"
{
}

CBaseURLType::CBaseURLType(CBaseURLType const& other)
: ::MPDSchema::xs::CanyURIType(other.GetNode())
, serviceLocation(*this)    // "@serviceLocation"
, byteRange(*this)  // "@byteRange"
{
}

void CBaseURLType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("BaseURLType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CConditionalUintType::CConditionalUintType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CConditionalUintType::CConditionalUintType(CConditionalUintType const& other)
: TypeBase(other.GetNode())
{
}


CContentComponentType::CContentComponentType(xercesc::DOMNode* const& node)
: TypeBase(node)
, id(*this) // "@id"
, lang(*this)   // "@lang"
, contentType(*this)    // "@contentType"
, par(*this)    // "@par"
, Accessibility(*this)  // "Accessibility"
, Role(*this)   // "Role"
, Rating(*this) // "Rating"
, Viewpoint(*this)  // "Viewpoint"
{
}

CContentComponentType::CContentComponentType(CContentComponentType const& other)
: TypeBase(other.GetNode())
, id(*this) // "@id"
, lang(*this)   // "@lang"
, contentType(*this)    // "@contentType"
, par(*this)    // "@par"
, Accessibility(*this)  // "Accessibility"
, Role(*this)   // "Role"
, Rating(*this) // "Rating"
, Viewpoint(*this)  // "Viewpoint"
{
}

void CContentComponentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("ContentComponentType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CContentProtectionType::CContentProtectionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, schemeIdUri(*this)    // "@schemeIdUri"
, value2(*this) // "@value"
, FormatVersion(*this)  // "FormatVersion"
, MarlinContentIds(*this)   // "MarlinContentIds"
, MarlinBroadband(*this)    // "MarlinBroadband"
, MS3(*this)    // "MS3"
{
}

CContentProtectionType::CContentProtectionType(CContentProtectionType const& other)
: TypeBase(other.GetNode())
, schemeIdUri(*this)    // "@schemeIdUri"
, value2(*this) // "@value"
, FormatVersion(*this)  // "FormatVersion"
, MarlinContentIds(*this)   // "MarlinContentIds"
, MarlinBroadband(*this)    // "MarlinBroadband"
, MS3(*this)    // "MS3"
{
}

void CContentProtectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("ContentProtectionType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CDescriptorType::CDescriptorType(xercesc::DOMNode* const& node)
: TypeBase(node)
, schemeIdUri(*this)    // "@schemeIdUri"
, value2(*this) // "@value"
{
}

CDescriptorType::CDescriptorType(CDescriptorType const& other)
: TypeBase(other.GetNode())
, schemeIdUri(*this)    // "@schemeIdUri"
, value2(*this) // "@value"
{
}

void CDescriptorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("DescriptorType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

#undef major
#undef minor

CFormatVersionType::CFormatVersionType(xercesc::DOMNode* const& node)
: TypeBase(node)
, major(*this)  // "@major"
, minor2(*this) // "@minor"
{
}

CFormatVersionType::CFormatVersionType(CFormatVersionType const& other)
: TypeBase(other.GetNode())
, major(*this)  // "@major"
, minor2(*this) // "@minor"
{
}

void CFormatVersionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("FormatVersionType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CMPDtype::CMPDtype(xercesc::DOMNode* const& node)
: TypeBase(node)
, id(*this) // "@id"
, profiles(*this)   // "@profiles"
, type(*this)   // "@type"
, availabilityStartTime(*this)  // "@availabilityStartTime"
, availabilityEndTime(*this)    // "@availabilityEndTime"
, mediaPresentationDuration(*this)  // "@mediaPresentationDuration"
, minimumUpdatePeriod(*this)    // "@minimumUpdatePeriod"
, minBufferTime(*this)  // "@minBufferTime"
, timeShiftBufferDepth(*this)   // "@timeShiftBufferDepth"
, suggestedPresentationDelay(*this) // "@suggestedPresentationDelay"
, maxSegmentDuration(*this) // "@maxSegmentDuration"
, maxSubsegmentDuration(*this)  // "@maxSubsegmentDuration"
, ProgramInformation(*this) // "ProgramInformation"
, BaseURL(*this)    // "BaseURL"
, Location(*this)   // "Location"
, Period(*this) // "Period"
, Metrics(*this)    // "Metrics"
{
}

CMPDtype::CMPDtype(CMPDtype const& other)
: TypeBase(other.GetNode())
, id(*this) // "@id"
, profiles(*this)   // "@profiles"
, type(*this)   // "@type"
, availabilityStartTime(*this)  // "@availabilityStartTime"
, availabilityEndTime(*this)    // "@availabilityEndTime"
, mediaPresentationDuration(*this)  // "@mediaPresentationDuration"
, minimumUpdatePeriod(*this)    // "@minimumUpdatePeriod"
, minBufferTime(*this)  // "@minBufferTime"
, timeShiftBufferDepth(*this)   // "@timeShiftBufferDepth"
, suggestedPresentationDelay(*this) // "@suggestedPresentationDelay"
, maxSegmentDuration(*this) // "@maxSegmentDuration"
, maxSubsegmentDuration(*this)  // "@maxSubsegmentDuration"
, ProgramInformation(*this) // "ProgramInformation"
, BaseURL(*this)    // "BaseURL"
, Location(*this)   // "Location"
, Period(*this) // "Period"
, Metrics(*this)    // "Metrics"
{
}

void CMPDtype::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("MPDtype"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CMS3Type::CMS3Type(xercesc::DOMNode* const& node)
: TypeBase(node)
, URIsAreTemplate(*this)    // "URIsAreTemplate"
{
}

CMS3Type::CMS3Type(CMS3Type const& other)
: TypeBase(other.GetNode())
, URIsAreTemplate(*this)    // "URIsAreTemplate"
{
}

void CMS3Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("MS3Type"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CMarlinBroadbandType::CMarlinBroadbandType(xercesc::DOMNode* const& node)
: TypeBase(node)
, SilentRightsUrl(*this)    // "SilentRightsUrl"
, PreviewRightsUrl(*this)   // "PreviewRightsUrl"
, RightsIssuerUrl(*this)    // "RightsIssuerUrl"
{
}

CMarlinBroadbandType::CMarlinBroadbandType(CMarlinBroadbandType const& other)
: TypeBase(other.GetNode())
, SilentRightsUrl(*this)    // "SilentRightsUrl"
, PreviewRightsUrl(*this)   // "PreviewRightsUrl"
, RightsIssuerUrl(*this)    // "RightsIssuerUrl"
{
}

void CMarlinBroadbandType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("MarlinBroadbandType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CMarlinContentIdsType::CMarlinContentIdsType(xercesc::DOMNode* const& node)
: TypeBase(node)
, MarlinContentId(*this)    // "MarlinContentId"
{
}

CMarlinContentIdsType::CMarlinContentIdsType(CMarlinContentIdsType const& other)
: TypeBase(other.GetNode())
, MarlinContentId(*this)    // "MarlinContentId"
{
}

void CMarlinContentIdsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("MarlinContentIdsType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CMetricsType::CMetricsType(xercesc::DOMNode* const& node)
: TypeBase(node)
, metrics(*this)    // "@metrics"
, Reporting(*this)  // "Reporting"
, Range(*this)  // "Range"
{
}

CMetricsType::CMetricsType(CMetricsType const& other)
: TypeBase(other.GetNode())
, metrics(*this)    // "@metrics"
, Reporting(*this)  // "Reporting"
, Range(*this)  // "Range"
{
}

void CMetricsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("MetricsType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CMultipleSegmentBaseType::CMultipleSegmentBaseType(xercesc::DOMNode* const& node)
: ::MPDSchema::CSegmentBaseType(node)
, duration(*this)   // "@duration"
, startNumber(*this)    // "@startNumber"
, SegmentTimeline(*this)    // "SegmentTimeline"
, BitstreamSwitching(*this) // "BitstreamSwitching"
{
}

CMultipleSegmentBaseType::CMultipleSegmentBaseType(CMultipleSegmentBaseType const& other)
: ::MPDSchema::CSegmentBaseType(other.GetNode())
, duration(*this)   // "@duration"
, startNumber(*this)    // "@startNumber"
, SegmentTimeline(*this)    // "SegmentTimeline"
, BitstreamSwitching(*this) // "BitstreamSwitching"
{
}

void CMultipleSegmentBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("MultipleSegmentBaseType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}


CPeriodType::CPeriodType(xercesc::DOMNode* const& node)
: TypeBase(node)
, id(*this) // "@id"
, start(*this)  // "@start"
, duration(*this)   // "@duration"
, bitstreamSwitching(*this) // "@bitstreamSwitching"
, BaseURL(*this)    // "BaseURL"
, SegmentBase(*this)    // "SegmentBase"
, SegmentList(*this)    // "SegmentList"
, SegmentTemplate(*this)    // "SegmentTemplate"
, AdaptationSet(*this)  // "AdaptationSet"
, Subset(*this) // "Subset"
{
}

CPeriodType::CPeriodType(CPeriodType const& other)
: TypeBase(other.GetNode())
, id(*this) // "@id"
, start(*this)  // "@start"
, duration(*this)   // "@duration"
, bitstreamSwitching(*this) // "@bitstreamSwitching"
, BaseURL(*this)    // "BaseURL"
, SegmentBase(*this)    // "SegmentBase"
, SegmentList(*this)    // "SegmentList"
, SegmentTemplate(*this)    // "SegmentTemplate"
, AdaptationSet(*this)  // "AdaptationSet"
, Subset(*this) // "Subset"
{
}


void CPeriodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("PeriodType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CPresentationType::CPresentationType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CPresentationType::CPresentationType(CPresentationType const& other)
: TypeBase(other.GetNode())
{
}


CProgramInformationType::CProgramInformationType(xercesc::DOMNode* const& node)
: TypeBase(node)
, lang(*this)   // "@lang"
, moreInformationURL(*this) // "@moreInformationURL"
, Title(*this)  // "Title"
, Source(*this) // "Source"
, Copyright(*this)  // "Copyright"
{
}

CProgramInformationType::CProgramInformationType(CProgramInformationType const& other)
: TypeBase(other.GetNode())
, lang(*this)   // "@lang"
, moreInformationURL(*this) // "@moreInformationURL"
, Title(*this)  // "Title"
, Source(*this) // "Source"
, Copyright(*this)  // "Copyright"
{
}

void CProgramInformationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("ProgramInformationType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CRangeType::CRangeType(xercesc::DOMNode* const& node)
: TypeBase(node)
, starttime(*this)  // "@starttime"
, duration(*this)   // "@duration"
{
}

CRangeType::CRangeType(CRangeType const& other)
: TypeBase(other.GetNode())
, starttime(*this)  // "@starttime"
, duration(*this)   // "@duration"
{
}

void CRangeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("RangeType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CRepresentationBaseType::CRepresentationBaseType(xercesc::DOMNode* const& node)
: TypeBase(node)
, profiles(*this)   // "@profiles"
, width(*this)  // "@width"
, height(*this) // "@height"
, sar(*this)    // "@sar"
, frameRate(*this)  // "@frameRate"
, audioSamplingRate(*this)  // "@audioSamplingRate"
, mimeType(*this)   // "@mimeType"
, segmentProfiles(*this)    // "@segmentProfiles"
, codecs(*this) // "@codecs"
, maximumSAPPeriod(*this)   // "@maximumSAPPeriod"
, startWithSAP(*this)   // "@startWithSAP"
, maxPlayoutRate(*this) // "@maxPlayoutRate"
, codingDependency(*this)   // "@codingDependency"
, scanType(*this)   // "@scanType"
, FramePacking(*this)   // "FramePacking"
, AudioChannelConfiguration(*this)  // "AudioChannelConfiguration"
, ContentProtection(*this)  // "ContentProtection"
{
}

CRepresentationBaseType::CRepresentationBaseType(CRepresentationBaseType const& other)
: TypeBase(other.GetNode())
, profiles(*this)   // "@profiles"
, width(*this)  // "@width"
, height(*this) // "@height"
, sar(*this)    // "@sar"
, frameRate(*this)  // "@frameRate"
, audioSamplingRate(*this)  // "@audioSamplingRate"
, mimeType(*this)   // "@mimeType"
, segmentProfiles(*this)    // "@segmentProfiles"
, codecs(*this) // "@codecs"
, maximumSAPPeriod(*this)   // "@maximumSAPPeriod"
, startWithSAP(*this)   // "@startWithSAP"
, maxPlayoutRate(*this) // "@maxPlayoutRate"
, codingDependency(*this)   // "@codingDependency"
, scanType(*this)   // "@scanType"
, FramePacking(*this)   // "FramePacking"
, AudioChannelConfiguration(*this)  // "AudioChannelConfiguration"
, ContentProtection(*this)  // "ContentProtection"
{
}

void CRepresentationBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("RepresentationBaseType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CRepresentationType::CRepresentationType(xercesc::DOMNode* const& node)
: ::MPDSchema::CRepresentationBaseType(node)
, id(*this) // "@id"
, bandwidth(*this)  // "@bandwidth"
, qualityRanking(*this) // "@qualityRanking"
, dependencyId(*this)   // "@dependencyId"
, mediaStreamStructureId(*this) // "@mediaStreamStructureId"
, BaseURL(*this)    // "BaseURL"
, SubRepresentation(*this)  // "SubRepresentation"
, SegmentBase(*this)    // "SegmentBase"
, SegmentList(*this)    // "SegmentList"
, SegmentTemplate(*this)    // "SegmentTemplate"
{
}

CRepresentationType::CRepresentationType(CRepresentationType const& other)
: ::MPDSchema::CRepresentationBaseType(other.GetNode())
, id(*this) // "@id"
, bandwidth(*this)  // "@bandwidth"
, qualityRanking(*this) // "@qualityRanking"
, dependencyId(*this)   // "@dependencyId"
, mediaStreamStructureId(*this) // "@mediaStreamStructureId"
, BaseURL(*this)    // "BaseURL"
, SubRepresentation(*this)  // "SubRepresentation"
, SegmentBase(*this)    // "SegmentBase"
, SegmentList(*this)    // "SegmentList"
, SegmentTemplate(*this)    // "SegmentTemplate"
{
}

void CRepresentationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("RepresentationType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}


CSAPType::CSAPType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CSAPType::CSAPType(CSAPType const& other)
: TypeBase(other.GetNode())
{
}


CSegmentBaseType::CSegmentBaseType(xercesc::DOMNode* const& node)
: TypeBase(node)
, timescale(*this)  // "@timescale"
, presentationTimeOffset(*this) // "@presentationTimeOffset"
, indexRange(*this) // "@indexRange"
, indexRangeExact(*this)    // "@indexRangeExact"
, Initialisation(*this) // "Initialisation"
, Initialization(*this) // "Initialization"
, RepresentationIndex(*this)    // "RepresentationIndex"
{
}

CSegmentBaseType::CSegmentBaseType(CSegmentBaseType const& other)
: TypeBase(other.GetNode())
, timescale(*this)  // "@timescale"
, presentationTimeOffset(*this) // "@presentationTimeOffset"
, indexRange(*this) // "@indexRange"
, indexRangeExact(*this)    // "@indexRangeExact"
, Initialisation(*this) // "Initialisation"
, Initialization(*this) // "Initialization"
, RepresentationIndex(*this)    // "RepresentationIndex"
{
}

void CSegmentBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("SegmentBaseType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CSegmentListType::CSegmentListType(xercesc::DOMNode* const& node)
: ::MPDSchema::CMultipleSegmentBaseType(node)
, SegmentURL(*this) // "SegmentURL"
{
}

CSegmentListType::CSegmentListType(CSegmentListType const& other)
: ::MPDSchema::CMultipleSegmentBaseType(other.GetNode())
, SegmentURL(*this) // "SegmentURL"
{
}


void CSegmentListType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("SegmentListType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CSegmentTemplateType::CSegmentTemplateType(xercesc::DOMNode* const& node)
: ::MPDSchema::CMultipleSegmentBaseType(node)
, media(*this)  // "@media"
, index(*this)  // "@index"
, initialisation2(*this)    // "@initialisation"
, initialization2(*this)    // "@initialization"
, bitstreamSwitching2(*this)    // "@bitstreamSwitching"
{
}

CSegmentTemplateType::CSegmentTemplateType(CSegmentTemplateType const& other)
: ::MPDSchema::CMultipleSegmentBaseType(other.GetNode())
, media(*this)  // "@media"
, index(*this)  // "@index"
, initialisation2(*this)    // "@initialisation"
, initialization2(*this)    // "@initialization"
, bitstreamSwitching2(*this)    // "@bitstreamSwitching"
{
}

void CSegmentTemplateType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("SegmentTemplateType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CSegmentTimelineType::CSegmentTimelineType(xercesc::DOMNode* const& node)
: TypeBase(node)
, S(*this)  // "S"
{
}

CSegmentTimelineType::CSegmentTimelineType(CSegmentTimelineType const& other)
: TypeBase(other.GetNode())
, S(*this)  // "S"
{
}

void CSegmentTimelineType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("SegmentTimelineType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}



CSegmentURLType::CSegmentURLType(xercesc::DOMNode* const& node)
: TypeBase(node)
, media(*this)  // "@media"
, mediaRange(*this) // "@mediaRange"
, index(*this)  // "@index"
, indexRange(*this) // "@indexRange"
{
}

CSegmentURLType::CSegmentURLType(CSegmentURLType const& other)
: TypeBase(other.GetNode())
, media(*this)  // "@media"
, mediaRange(*this) // "@mediaRange"
, index(*this)  // "@index"
, indexRange(*this) // "@indexRange"
{
}

void CSegmentURLType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("SegmentURLType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CStringVectorType::CStringVectorType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CStringVectorType::CStringVectorType(CStringVectorType const& other)
: TypeBase(other.GetNode())
{
}


CSubRepresentationType::CSubRepresentationType(xercesc::DOMNode* const& node)
: ::MPDSchema::CRepresentationBaseType(node)
, level(*this)  // "@level"
, dependencyLevel(*this)    // "@dependencyLevel"
, bandwidth(*this)  // "@bandwidth"
, contentComponent(*this)   // "@contentComponent"
{
}

CSubRepresentationType::CSubRepresentationType(CSubRepresentationType const& other)
: ::MPDSchema::CRepresentationBaseType(other.GetNode())
, level(*this)  // "@level"
, dependencyLevel(*this)    // "@dependencyLevel"
, bandwidth(*this)  // "@bandwidth"
, contentComponent(*this)   // "@contentComponent"
{
}

void CSubRepresentationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("SubRepresentationType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CSubsetType::CSubsetType(xercesc::DOMNode* const& node)
: TypeBase(node)
, contains(*this)   // "@contains"
{
}

CSubsetType::CSubsetType(CSubsetType const& other)
: TypeBase(other.GetNode())
, contains(*this)   // "@contains"
{
}

void CSubsetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("SubsetType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CUIntVectorType::CUIntVectorType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CUIntVectorType::CUIntVectorType(CUIntVectorType const& other)
: TypeBase(other.GetNode())
{
}


CURLType::CURLType(xercesc::DOMNode* const& node)
: TypeBase(node)
, sourceURL(*this)  // "@sourceURL"
, range(*this)  // "@range"
{
}

CURLType::CURLType(CURLType const& other)
: TypeBase(other.GetNode())
, sourceURL(*this)  // "@sourceURL"
, range(*this)  // "@range"
{
}

void CURLType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("URLType"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CVideoScanType::CVideoScanType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CVideoScanType::CVideoScanType(CVideoScanType const& other)
: TypeBase(other.GetNode())
{
}


CMPDSchema::CMPDSchema(xercesc::DOMNode* const& node)
: TypeBase(node)
, MPD(*this)    // "MPD"
{
}

CMPDSchema::CMPDSchema(CMPDSchema const& other)
: TypeBase(other.GetNode())
, MPD(*this)    // "MPD"
{
}

void CMPDSchema::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"), 
        _T("MPDSchema"), _T("urn:mpeg:dash:schema:mpd:2011"));
}

CMPDSchema* CMPDSchema::LoadFromFile(const string_type& fileName)
{
    return new CMPDSchema(XercesTreeOperations::LoadDocument(fileName));
}

CMPDSchema* CMPDSchema::LoadFromString(const string_type& text)
{
    return new CMPDSchema(XercesTreeOperations::LoadXml(text));
}

void CMPDSchema::SaveToFile(const string_type& fileName, bool prettyPrint)
{
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, _T("UTF-8"), false, false);
}

void CMPDSchema::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding)
{
    std::vector<unsigned char> result;
    string_type sTmpEnc( encoding);
    std::transform( sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0);
}

void CMPDSchema::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, bBigEndian, bBOM);
}

string_type CMPDSchema::SaveToString(bool prettyPrint)
{
    return XercesTreeOperations::SaveXml(GetDocumentNode(), prettyPrint);
}

CMPDSchema CMPDSchema::CreateDocument()
{
    return XercesTreeOperations::CreateDocument();
}

void CMPDSchema::DestroyDocument()
{
    XercesTreeOperations::DocumentType doc = GetDocumentNode();
    XercesTreeOperations::FreeDocument(doc);
    m_node = 0;
}

void CMPDSchema::SetDTDLocation(const string_type& dtdLocation)
{

    xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
    xercesc::DOMDocumentType* doctype = document->getDoctype();
    if (doctype != 0)
    {
        document->removeChild(doctype);
    }

    xercesc::DOMElement* rootElement = document->getDocumentElement();
    if (rootElement == 0)
        throw altova::InvalidOperationException(_T("You have to add a root element before setting DTD location."));

    doctype = document->createDocumentType(rootElement->getNodeName(), XercesStringTemp(_T("")), XercesStringTemp(dtdLocation));
    document->insertBefore(doctype, rootElement);

}

void CMPDSchema::SetSchemaLocation(const string_type& schemaLocation)
{

    xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
    xercesc::DOMElement* rootElement = document->getDocumentElement();
    if (rootElement == 0)
        throw altova::InvalidOperationException(_T("You have to add a root element before setting schema location."));

    string_type namespaceURI = XercesUnstringTemp(rootElement->getNamespaceURI());
    
    
    if (namespaceURI.empty())
        XercesTreeOperations::SetAttribute(rootElement, _T("xsi:noNamespaceSchemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), schemaLocation);
    else
        XercesTreeOperations::SetAttribute(rootElement, _T("xsi:schemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), namespaceURI + _T(" ") + schemaLocation);

}

CMPDSchema CMPDSchema::LoadFromBinary(const std::vector<unsigned char>& data)
{
    return XercesTreeOperations::LoadFromBinary(data);
}

std::vector<unsigned char> CMPDSchema::SaveToBinary(bool prettyPrint)
{
    return XercesTreeOperations::SaveToBinary((XercesTreeOperations::DocumentType)GetNode(), prettyPrint);
}

std::vector<unsigned char> CMPDSchema::SaveToBinary(bool prettyPrint, const string_type& encoding)
{
    std::vector<unsigned char> result;
    string_type sTmpEnc( encoding);
    std::transform( sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
    XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0);
    return result;
}

std::vector<unsigned char> CMPDSchema::SaveToBinary(bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
    std::vector<unsigned char> result;
    XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, bBigEndian, bBOM);
    return result;
}




CSType::CSType(xercesc::DOMNode* const& node)
: TypeBase(node)
, t(*this)  // "@t"
, d(*this)  // "@d"
, r(*this)  // "@r"
{
}

CSType::CSType(CSType const& other)
: TypeBase(other.GetNode())
, t(*this)  // "@t"
, d(*this)  // "@d"
, r(*this)  // "@r"
{
}

namespace xs
{   

void CanyType::operator=(const string_type& value) { 
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed, value);
}

CanyType::operator string_type() {
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed);
}

void CanyURIType::operator=(const string_type& value) { 
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CanyURIType_altova_unnamed, value);
}

CanyURIType::operator string_type() {
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CanyURIType_altova_unnamed);
}

void CstringType::operator=(const string_type& value) { 
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CstringType_altova_unnamed, value);
}

CstringType::operator string_type() {
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CstringType_altova_unnamed);
}

} // namespace xs


void CBaseURLType::operator=(const string_type& value) { 
    CanyURIType::operator=(value);
}

}
