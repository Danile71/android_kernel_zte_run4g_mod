#ifndef SHF_DEFINE_H_
#define SHF_DEFINE_H_

#include "shf_types.h"

#define SHF_DEBUG_MODE

//not configurable
//should more than shf_sensor.h index value
#define SHF_POOL_SIZE                  (49)//valid range: 1 ~ size

//configurable
#define SHF_CONDITION_SIZE             (40)//valid range: 1 ~ size
#define SHF_CONDITION_ITEM_SIZE        (4)//valid range: 1 ~ size
#define SHF_CONDITION_ACTION_SIZE      (4)//valid range: 1 ~ size
#define SHF_ACTION_SIZE                (10)//valid range: 1 ~ size

//TODO should meet sensor requirement
#define SHF_POLLER_BUFFER_SIZE         (256)

/**
 * 1 for consys timeout
 * 2 for consys moving
 * 3 for consys reserved
 * 4 for touch panel
 */
#define SHF_CONDITION_RESERVED_HEAD                (0x00)
#define SHF_CONDITION_RESERVED_CONSYS_TIMEOUT      (0x01)
#define SHF_CONDITION_RESERVED_CONSYS_CONTEXT      (0x02)
#define SHF_CONDITION_RESERVED_CONSYS_RESERVED     (0x03)
#define SHF_CONDITION_RESERVED_TOUCH_PANEL_ON      (0x04)
#define SHF_CONDITION_RESERVED_TOUCH_PANEL_OFF     (0x05)
#define SHF_CONDITION_RESERVED_COUNT               (0x06)

//function execution result
#define SHF_STATUS_OK                              (0x00)
#define SHF_STATUS_ERROR                           (0xA1)

// data type enum @{
typedef uint8_t shf_data_type_t;
#define SHF_DATA_TYPE_INVALID          (0x00)
#define SHF_DATA_TYPE_UINT32           (0x01)
#define SHF_DATA_TYPE_UINT64           (0x02)
#define SHF_DATA_TYPE_FLOAT            (0x03)
//@}

// slot 0 is reserved for NULL check.
typedef uint8_t shf_action_id_t;
#define SHF_ACTION_MASK_DATA           (0x0F)
#define SHF_ACTION_MASK_REPEAT         (0x80)//repeat
#define SHF_ACTION_MASK_CHECK_LAST     (0x40)//1: only trigger action when last fail, current pass
#define SHF_ACTION_MASK_NEW            (0x20)//new add
#define SHF_ACTION_MASK_SENT           (0x10)//has sent

// action enum @{
#define SHF_ACTION_ID_INVALID          (0x00)
#define SHF_ACTION_ID_AP_WAKEUP        (0x01)
#define SHF_ACTION_ID_TOUCH_ACTIVE     (0x02)
#define SHF_ACTION_ID_TOUCH_DEACTIVE   (0x03)
#define SHF_ACTION_ID_CONSYS_WAKEUP    (0x04)
#define SHF_ACTION_ID_RESERVED_COUNT   (0x05)
// @}

typedef uint8_t shf_combine_t;
// combine type enum @{
//Only for not the first combines
#define SHF_COMBINE_MASK_BRACKET_RIGHT     (0x80)//For all combines
#define SHF_COMBINE_MASK_BRACKET_LEFT      (0x40)//Only for not the first combines
#define SHF_COMBINE_MASK_DATA              (0x0F)

//Use the first item's combine to save last check result for saving data size
#define SHF_COMBINE_MASK_LAST_RESULT       (0x01)//last checking loop result
#define SHF_COMBINE_MASK_CHECKED           (0x02)//check it in this checking loop

//Only for not the first combine
#define SHF_COMBINE_INVALID                (0x00)
#define SHF_COMBINE_AND                    (0x01)
#define SHF_COMBINE_OR                     (0x02)
// @}

//condition operation type
typedef uint8_t shf_operation_type;
// operator type info @{
#define SHF_OPERATION_ANY                  (0xFF)
#define SHF_OPERATION_INVALID              (0x00)

//Conceptually, old flag should be in data index: 0(old flag),0000000(data index).
//But, I save it in operation for reserving more bits for data index.(00000000)
#define SHF_OPERATION_MASK_OLD1            (0x80)
#define SHF_OPERATION_MASK_OLD2            (0x40)
#define SHF_OPERATION_MASK_CMP             (0x20)
#define SHF_OPERATION_MASK_DIF             (0x10)
#define SHF_OPERATION_MASK_DATA            (0x0F)

#define SHF_OPERATION_MORE_THAN            (0x01)
#define SHF_OPERATION_MORE_THAN_OR_EQUAL   (0x02)
#define SHF_OPERATION_LESS_THAN            (0x03)
#define SHF_OPERATION_LESS_THAN_OR_EQUAL   (0x04)
#define SHF_OPERATION_EQUAL                (0x05)
#define SHF_OPERATION_NOT_EQUAL            (0x06)
#define SHF_OPERATION_MOD                  (0x07)
#define SHF_OPERATION_MOD_OFFSET           (0x08)
// @}

typedef uint8_t shf_data_index_t;
typedef uint8_t shf_action_index_t;
typedef uint8_t shf_condition_index_t;
typedef uint8_t shf_condition_item_index_t;

#define SHF_CONDITION_INDEX_INVALID    (0x00)
#define SHF_ACTION_INDEX_INVALID       (0x00)

typedef union {
    uint32_t duint32;
    timestamp_t dtime;
} shf_data_value_t;

typedef struct {
    shf_data_value_t value;
    shf_data_index_t dindex1;
    shf_data_index_t dindex2;
    shf_operation_type op;
    shf_combine_t combine;
} shf_condition_item_t;

typedef struct {
    union {
        struct {
            shf_condition_item_t item[SHF_CONDITION_ITEM_SIZE];
            shf_action_id_t action[SHF_CONDITION_ACTION_SIZE];
        };
        shf_condition_index_t next;
    };
} shf_condition_t;


//data pool index @{
#define SHF_DATA_INDEX_INVALID (0)

#define SHF_DATA_INDEX_ACCELEROMETER_X (1) // 1
#define SHF_DATA_INDEX_ACCELEROMETER_Y (SHF_DATA_INDEX_ACCELEROMETER_X + 1) // 2
#define SHF_DATA_INDEX_ACCELEROMETER_Z (SHF_DATA_INDEX_ACCELEROMETER_Y + 1) // 3
#define SHF_DATA_INDEX_ACCELEROMETER_TIME (SHF_DATA_INDEX_ACCELEROMETER_Z + 1) // 4

#define SHF_DATA_INDEX_LIGHT_VALUE (SHF_DATA_INDEX_ACCELEROMETER_TIME + 2) //6
#define SHF_DATA_INDEX_LIGHT_TIME (SHF_DATA_INDEX_LIGHT_VALUE + 1) //7

#define SHF_DATA_INDEX_PROXIMITY_VALUE (SHF_DATA_INDEX_LIGHT_TIME + 2) //9
#define SHF_DATA_INDEX_PROXIMITY_TIME (SHF_DATA_INDEX_PROXIMITY_VALUE + 1) //10

#define SHF_DATA_INDEX_CLOCK_TIME (SHF_DATA_INDEX_PROXIMITY_TIME + 2) //12

#define SHF_DATA_INDEX_PEDOMETER_LENGTH (SHF_DATA_INDEX_CLOCK_TIME + 2) //14
#define SHF_DATA_INDEX_PEDOMETER_FREQUENCY (SHF_DATA_INDEX_PEDOMETER_LENGTH + 1) //15
#define SHF_DATA_INDEX_PEDOMETER_COUNT (SHF_DATA_INDEX_PEDOMETER_FREQUENCY + 1) //16
#define SHF_DATA_INDEX_PEDOMETER_DISTANCE (SHF_DATA_INDEX_PEDOMETER_COUNT + 1) //17
#define SHF_DATA_INDEX_PEDOMETER_TIME (SHF_DATA_INDEX_PEDOMETER_DISTANCE + 1) //18

#define SHF_DATA_INDEX_ACTIVITY_VEHICLE (SHF_DATA_INDEX_PEDOMETER_TIME + 2) //20
#define SHF_DATA_INDEX_ACTIVITY_BIKE (SHF_DATA_INDEX_ACTIVITY_VEHICLE + 1) //21
#define SHF_DATA_INDEX_ACTIVITY_FOOT (SHF_DATA_INDEX_ACTIVITY_BIKE + 1) //22
#define SHF_DATA_INDEX_ACTIVITY_STILL (SHF_DATA_INDEX_ACTIVITY_FOOT + 1) //23
#define SHF_DATA_INDEX_ACTIVITY_UNKNOWN (SHF_DATA_INDEX_ACTIVITY_STILL + 1) //24
#define SHF_DATA_INDEX_ACTIVITY_TILT (SHF_DATA_INDEX_ACTIVITY_UNKNOWN + 1) //25
#define SHF_DATA_INDEX_ACTIVITY_TIME (SHF_DATA_INDEX_ACTIVITY_TILT + 1) //26

#define SHF_DATA_INDEX_INPOCKET_VALUE (SHF_DATA_INDEX_ACTIVITY_TIME + 2) //28
#define SHF_DATA_INDEX_INPOCKET_TIME (SHF_DATA_INDEX_INPOCKET_VALUE + 1) //29

//MPACTIVITY: most probable activity
#define SHF_DATA_INDEX_MPACTIVITY_ACTIVITY (SHF_DATA_INDEX_INPOCKET_TIME + 2) //31
#define SHF_DATA_INDEX_MPACTIVITY_CONFIDENCE (SHF_DATA_INDEX_MPACTIVITY_ACTIVITY + 1) //32
#define SHF_DATA_INDEX_MPACTIVITY_TIME (SHF_DATA_INDEX_MPACTIVITY_CONFIDENCE + 1) //33

#define SHF_DATA_INDEX_SIGNIFICANT_VALUE (SHF_DATA_INDEX_MPACTIVITY_TIME + 2) //35
#define SHF_DATA_INDEX_SIGNIFICANT_TIME (SHF_DATA_INDEX_SIGNIFICANT_VALUE + 1) //36

#define SHF_DATA_INDEX_PICKUP_VALUE (SHF_DATA_INDEX_SIGNIFICANT_TIME + 2)//38
#define SHF_DATA_INDEX_PICKUP_TIME (SHF_DATA_INDEX_PICKUP_VALUE + 1)//39

#define SHF_DATA_INDEX_FACEDOWN_VALUE (SHF_DATA_INDEX_PICKUP_TIME + 2)//41
#define SHF_DATA_INDEX_FACEDOWN_TIME (SHF_DATA_INDEX_FACEDOWN_VALUE + 1)//42

#define SHF_DATA_INDEX_SHAKE_VALUE (SHF_DATA_INDEX_FACEDOWN_TIME + 2)//44
#define SHF_DATA_INDEX_SHAKE_TIME (SHF_DATA_INDEX_SHAKE_VALUE + 1)//45

#define SHF_DATA_INDEX_GESTURE_VALUE (SHF_DATA_INDEX_SHAKE_TIME + 2)//47
#define SHF_DATA_INDEX_GESTURE_TIME (SHF_DATA_INDEX_GESTURE_VALUE + 1)//48
// @}


// index range @{
#define SHF_DATA_INDEX_POINTER_ACCELEROMETER_BEGIN (SHF_DATA_INDEX_ACCELEROMETER_X)
#define SHF_DATA_INDEX_POINTER_ACCELEROMETER_END (SHF_DATA_INDEX_ACCELEROMETER_TIME)

#define SHF_DATA_INDEX_POINTER_LIGHT_BEGIN (SHF_DATA_INDEX_LIGHT_VALUE)
#define SHF_DATA_INDEX_POINTER_LIGHT_END (SHF_DATA_INDEX_LIGHT_TIME)

#define SHF_DATA_INDEX_POINTER_CLOCK_BEGIN (SHF_DATA_INDEX_CLOCK_TIME)
#define SHF_DATA_INDEX_POINTER_CLOCK_END (SHF_DATA_INDEX_CLOCK_TIME)

#define SHF_DATA_INDEX_POINTER_PEDOMETER_BEGIN (SHF_DATA_INDEX_PEDOMETER_LENGTH)
#define SHF_DATA_INDEX_POINTER_PEDOMETER_END (SHF_DATA_INDEX_PEDOMETER_TIME)

#define SHF_DATA_INDEX_POINTER_ACTIVITY_BEGIN (SHF_DATA_INDEX_ACTIVITY_VEHICLE)
#define SHF_DATA_INDEX_POINTER_ACTIVITY_END (SHF_DATA_INDEX_ACTIVITY_TIME)

#define SHF_DATA_INDEX_POINTER_INPOCKET_BEGIN (SHF_DATA_INDEX_INPOCKET_VALUE)
#define SHF_DATA_INDEX_POINTER_INPOCKET_END (SHF_DATA_INDEX_INPOCKET_TIME)

#define SHF_DATA_INDEX_POINTER_MPACTIVITY_BEGIN (SHF_DATA_INDEX_MPACTIVITY_ACTIVITY)
#define SHF_DATA_INDEX_POINTER_MPACTIVITY_END (SHF_DATA_INDEX_MPACTIVITY_TIME)

#define SHF_DATA_INDEX_POINTER_SIGNIFICANT_BEGIN (SHF_DATA_INDEX_SIGNIFICANT_VALUE)
#define SHF_DATA_INDEX_POINTER_SIGNIFICANT_END (SHF_DATA_INDEX_SIGNIFICANT_TIME)

#define SHF_DATA_INDEX_POINTER_PICKUP_BEGIN (SHF_DATA_INDEX_PICKUP_VALUE)
#define SHF_DATA_INDEX_POINTER_PICKUP_END (SHF_DATA_INDEX_PICKUP_TIME)

#define SHF_DATA_INDEX_POINTER_FACEDOWN_BEGIN (SHF_DATA_INDEX_FACEDOWN_VALUE)
#define SHF_DATA_INDEX_POINTER_FACEDOWN_END (SHF_DATA_INDEX_FACEDOWN_TIME)

#define SHF_DATA_INDEX_POINTER_SHAKE_BEGIN (SHF_DATA_INDEX_SHAKE_VALUE)
#define SHF_DATA_INDEX_POINTER_SHAKE_END (SHF_DATA_INDEX_SHAKE_TIME)

#define SHF_DATA_INDEX_POINTER_GESTURE_BEGIN (SHF_DATA_INDEX_GESTURE_VALUE)
#define SHF_DATA_INDEX_POINTER_GESTURE_END (SHF_DATA_INDEX_GESTURE_TIME)
//@}

//data pool type @{
#define SHF_DATA_INDEX_TYPE_ACCELEROMETER_X (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACCELEROMETER_Y (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACCELEROMETER_Z (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACCELEROMETER_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_LIGHT_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_LIGHT_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_PROXIMITY_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_PROXIMITY_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_CLOCK_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_PEDOMETER_LENGTH (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_PEDOMETER_FREQUENCY (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_PEDOMETER_COUNT (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_PEDOMETER_DISTANCE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_PEDOMETER_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_ACTIVITY_VEHICLE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACTIVITY_BIKE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACTIVITY_FOOT (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACTIVITY_STILL (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACTIVITY_UNKNOWN (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACTIVITY_TILT (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_ACTIVITY_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_INPOCKET_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_INPOCKET_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_MPACTIVITY_ACTIVITY (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_MPACTIVITY_CONFIDENCE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_MPACTIVITY_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_SIGNIFICANT_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_SIGNIFICANT_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_PICKUP_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_PICKUP_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_FACEDOWN_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_FACEDOWN_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_SHAKE_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_SHAKE_TIME (SHF_DATA_TYPE_UINT64)

#define SHF_DATA_INDEX_TYPE_GESTURE_VALUE (SHF_DATA_TYPE_UINT32)
#define SHF_DATA_INDEX_TYPE_GESTURE_TIME (SHF_DATA_TYPE_UINT64)
//@}

#define SHF_IPI_PROTOCOL_BYTES (48)
#define SHF_UART_PROTOCOL_BYTES (32)

#define SHF_CONSYS_TYPE_UART

#endif /* SHF_DEFINE_H_ */
